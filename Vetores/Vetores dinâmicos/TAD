Implementação das seguintes operações:
* Cria: operação para criar um novo vetor, inicialmente vazio.

* Insere: operação para inserir um novo elemento no final do vetor, com realocação automática, se necessário.

* Tam: operação que retorna o número de elementos efetivamente armazenados.

* Acessa: operação para acessar determinado vetor.

* Libera: operação para liberar a mémoria do vetor
vd_libera (VetorDin* vd)
{
free (vd -> v); //libera o vetor de float
free (vd); //libera a estrutura
}

//Passos:
#include <stdio.h>
#include <stdlib.h>

// Define o tipo estruturado para armazenar o vetor
typedef struct {
    int n;        // número de elementos armazenados
    int nmax;     // dimensão do vetor
    float* v;     // vetor dos elementos
} VetorDin;

// Implementa a função para criar o vetor dinâmico
VetorDin* vd_cria()
{
    VetorDin* vd = (VetorDin*) malloc(sizeof(VetorDin));
    vd->n = 0;
    vd->nmax = 4;
    vd->v = (float*) malloc(vd->nmax * sizeof(float));
    return vd;
}

// Função auxiliar para realocar o vetor caso necessário
static void realoca(VetorDin* vd)
{
    vd->nmax *= 2; // dobra a dimensão do vetor
    vd->v = (float*) realloc(vd->v, vd->nmax * sizeof(float));
}

// Insere um elemento no vetor
void vd_insere(VetorDin* vd, float x)
{
    if (vd->n == vd->nmax) // verifica se a capacidade do vetor se esgotou
        realoca(vd);
    vd->v[vd->n] = x;
    vd->n++;
}

// Retorna o tamanho atual do vetor
int vd_tam(VetorDin* vd)
{
    return vd->n;
}

// Retorna a capacidade máxima do vetor
int vd_tam_max(VetorDin* vd)
{
    return vd->nmax;
}

// Acessa o elemento de índice i no vetor
float vd_acessa(VetorDin* vd, int i)
{
    if (i < 0 || i >= vd->n) {
        printf("Valor fora dos limites do vetor\n");
        exit(5);
    }
    return vd->v[i];
}

// Libera a memória alocada para o vetor
void vd_libera(VetorDin* vd)
{
    free(vd->v);
    free(vd);
}

int main()
{
    VetorDin* vetor = vd_cria();
    vd_insere(vetor, 1.0);
    vd_insere(vetor, 2.5);
    vd_insere(vetor, 3.7);

    int tamanho = vd_tam(vetor);
    int tamanho_maximo = vd_tam_max(vetor);

    printf("Tamanho: %d\n", tamanho);
    printf("Tamanho máximo: %d\n", tamanho_maximo);

    for (int i = 0; i < tamanho; i++) {
        float valor = vd_acessa(vetor, i);
        printf("Valor[%d]: %f\n", i, valor);
    }

    vd_libera(vetor);

    return 0;
}


Exemplo vetor de valores reais (float)
typedefDin* vd_cria ( );
vd_insere (VetorDin* vd, float x);
int vd_tam (VetorDin* vd);
float vd_acessa (VetorDin* vd, int i);
vd_libera (VetorDin* vd);
